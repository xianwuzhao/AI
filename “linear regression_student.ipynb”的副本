{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"17K4joVZ2sbSckb-tVvEDFcn5jJb5AL-L","timestamp":1697687467329}]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["##Linear Regression with Python"],"metadata":{"id":"L8kwDo1l4GLl"}},{"cell_type":"markdown","source":["In this machine problem (MP), you will implement a simple linear regression model in Python. You will create your own dataset and visualize the results using Matplotlib.\n","\n"],"metadata":{"id":"xd23PwWB2BzJ"}},{"cell_type":"code","source":["import random\n","import numpy as np\n","import matplotlib.pyplot as plt\n","\n","def reset_seed(seed):\n","    random.seed(seed)\n","    np.random.seed(seed)"],"metadata":{"id":"ScZSQPMJ5qLF"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["**Task 1: Data Preparation**\n","\n","Write a Python function named `generate_data` that takes the following parameters:\n","\n","1.   `num_examples`: representing the number of data points to generate.\n","2.   `input_dim`: representing the dimensionality of data points to generate (without the bias dimension)\n","\n","Inside the function:\n","\n","1.   Specify the linear coefficient w and bias term (generate them randomly).\n","2.   Generate `num_examples` random values with dimension `input_dim`.\n","3.   Calculate the corresponding target variable `y`.\n","4.   (**opition**) Add random noise to `y` using a normal distribution with mean 0 and a pre-specified standard deviation.\n","\n","Return:\n","\n","1.   `data`: shape (num_examples, input_dim + 1), where the first dimension is the additional dimension and has value of 1.\n","2.   `y`: the target variable."],"metadata":{"id":"zczGtHPCTVXk"}},{"cell_type":"code","source":["def generate_data(num_example, input_dim):\n","    \"\"\"\n","    This function generates a dataset for linear regression.\n","    \"\"\"\n","    data, gt_y = None, None\n","    ###########################################\n","    ## TODO: Generate random data points and ##\n","    ## corresponding ground truth y values   ##\n","    ###########################################\n","    # step 1\n","    gt_w = np.random.randn(input_dim+1, 1)\n","\n","    # step 2\n","    data = np.random.rand(num_example, input_dim+1)\n","    data[:, 0] = 1\n","\n","    # step 3\n","    gt_y = data\n","    ###########################################\n","    ############ End of your code #############\n","    ###########################################\n","    return data, gt_y"],"metadata":{"id":"lgDmpoN-38t0"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["**Task 2: Data Visualization**\n","\n","Generate synthetic data using your `generate_data` function.\n","Create scatter plots to visualize the generated data points by setting input_dim to 1.\n"],"metadata":{"id":"w7GFJOLbcHXX"}},{"cell_type":"code","source":["num_example = 20\n","input_dim = 1\n","reset_seed(1)\n","\n","data, gt_y = generate_data(num_example, input_dim)\n","\n","plt.scatter(data[:,1], gt_y, label='Data Points', color='blue', marker='o')\n","plt.xlabel('data')\n","plt.ylabel('gt_y')\n","plt.title('Scatter plot')\n","plt.show()"],"metadata":{"id":"aGpHOvINaor2","colab":{"base_uri":"https://localhost:8080/","height":247},"executionInfo":{"status":"error","timestamp":1697938566742,"user_tz":420,"elapsed":161,"user":{"displayName":"Xianwu Zhao","userId":"12232356097360139039"}},"outputId":"b56d32b5-3d11-444d-9bce-92f570d1e8d4"},"execution_count":null,"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-6-6168268471b8>\u001b[0m in \u001b[0;36m<cell line: 3>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mnum_example\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m20\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0minput_dim\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0mreset_seed\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      4\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mgt_y\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgenerate_data\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnum_example\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minput_dim\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'reset_seed' is not defined"]}]},{"cell_type":"markdown","source":["**Task 3: Data Splitting for Model Training**\n","\n","Split the created dataset into a training set and a validation set. Please use the variable `train_perc` to control the proportion of data used for training. Splitting data into separate sets is crucial for evaluating machine learning models.\n","\n","Inside the function:\n","\n","1.   Calculate the number of samples to include in the training set and the validation set based on the `train_perc` parameter, which is a floating-point number between 0 and 1, indicating the proportion of data to be used for training. For example, if `train_perc` = 0.8, 80% of the data will be used for training, and the remaining 20% will be used for validation.\n","\n","2.   Randomly shuffle the data to ensure that it's not sorted in any particular order.\n","\n","3.   Split the data into training and validation sets according to the specified proportions.\n","\n"],"metadata":{"id":"0gsVqgW0mYGs"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"fAQh7jLS19Re","colab":{"base_uri":"https://localhost:8080/","height":247},"executionInfo":{"status":"error","timestamp":1697939387690,"user_tz":420,"elapsed":184,"user":{"displayName":"Xianwu Zhao","userId":"12232356097360139039"}},"outputId":"19214fb4-daf7-43e2-d64d-e1398470f27a"},"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-15-fe7dda84134b>\u001b[0m in \u001b[0;36m<cell line: 31>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     29\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mdata_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdata_test\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_test\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     30\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 31\u001b[0;31m \u001b[0mreset_seed\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     32\u001b[0m \u001b[0mtrain_perc\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m0.3\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     33\u001b[0m \u001b[0mdata_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdata_test\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_test\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtrain_test_split\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mgt_y\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtrain_perc\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'reset_seed' is not defined"]}],"source":["# train test split\n","def train_test_split(data, gt_y, train_perc):\n","    \"\"\"Split the dataset into training and validation set.\"\"\"\n","    assert(train_perc > 0. and train_perc <= 1.)\n","    data_train, y_train, data_test, y_test = None, None, None, None\n","\n","    ##################################################\n","    ## TODO: split data and gt_y into train and val ##\n","    ##################################################\n","    #step 1\n","    num_train = max(int(data.shape[0] * train_perc), 1)\n","\n","    #step 2\n","    inds = np.arange(data.sahpe[0])\n","    np.random.shuffle(inds)\n","\n","    train_inds = inds[:num_train]\n","    test_inds = inds[num_train:]\n","\n","    #step 3\n","    data_train = data[train_inds]\n","    y_train = gt_y[train_inds]\n","    data_train = data[train_inds]\n","    y_train = gt_y[train_inds]\n","    ##################################################\n","    ################ End of your code ################\n","    ##################################################\n","\n","    return data_train, y_train, data_test, y_test\n","\n","reset_seed(1)\n","train_perc = 0.3\n","data_train, y_train, data_test, y_test = train_test_split(data, gt_y, train_perc)\n","print(data_train.shape)"]},{"cell_type":"markdown","source":["**Task 4: Model Training - Analytically**\n","\n","You need to implement a simple linear regression function to obtian optimal weight and bias using the analytical solution method. This method allows you to calculate the coefficients of the linear regression model directly without iterative optimization algorithms."],"metadata":{"id":"YJYcP_uUnTH-"}},{"cell_type":"code","source":["def lin_reg_analyt(X, y):\n","    \"\"\"\n","    Train linear regression analytical.\n","    Optimial solution:\n","    (X^T * X)^{-1} * X^T * y\n","    \"\"\"\n","    W_optim = None\n","    ##########################################\n","    ## TODO: Calculate the optimal solution ##\n","    ##########################################\n","    W_optim = np.linalg.inv(X.T @ X) @ X.T @ y\n","    ##########################################\n","    ########### End of your code #############\n","    ##########################################\n","    return W_optim"],"metadata":{"id":"uUTgD8ff53Or"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["**Task 5: Train Your Model**\n","\n","Now, you already have all the helper functions to train your linear regression model. Obtain the predicted parameters."],"metadata":{"id":"NFqskhvUqTMJ"}},{"cell_type":"code","source":["parameters = lin_reg_analyt(data_train, y_train)\n","print(parameters)"],"metadata":{"id":"Aa8cw5R76MFU"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["**Task 6: Model Evaluation**\n","Make predictions on the validation data using your trained model.  Calculate and display the Mean Squared Error (MSE) score to evaluate the model's performance.\n","\n"],"metadata":{"id":"qS0C9_dp0MH7"}},{"cell_type":"code","source":["y_test_pred = None\n","##################################################\n","## TODO: Make predictions on the validation set ##\n","##################################################\n","y_test_pred = data_test @ parameters\n","##################################################\n","################ End of your code ################\n","##################################################\n","\n","# Calculate MSE error\n","mse = np.mean((y_test - y_test_pred) ** 2)\n","print(f\"MSE on validation set: {mse}\")"],"metadata":{"id":"MWDqYtlf6hfg","colab":{"base_uri":"https://localhost:8080/","height":247},"executionInfo":{"status":"error","timestamp":1697940030883,"user_tz":420,"elapsed":160,"user":{"displayName":"Xianwu Zhao","userId":"12232356097360139039"}},"outputId":"5df72ce7-016d-4e2f-d69f-7e8760b8c082"},"execution_count":null,"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-28-4be96aee827d>\u001b[0m in \u001b[0;36m<cell line: 5>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;31m## TODO: Make predictions on the validation set ##\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;31m##################################################\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 5\u001b[0;31m \u001b[0my_test_pred\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdata_test\u001b[0m \u001b[0;34m@\u001b[0m \u001b[0mparameters\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      6\u001b[0m \u001b[0;31m##################################################\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0;31m################ End of your code ################\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'data_test' is not defined"]}]},{"cell_type":"markdown","source":["**Remark**\n","\n","By now, you have finished the basic version of linear regression. With no additive noise in your data generation function, the MSE you achieve by using the analytical solution should be almost zero."],"metadata":{"id":"kfkSzjuxt84D"}},{"cell_type":"markdown","source":["## Homework (Due on Sat Oct 21, 11:59pm PST)"],"metadata":{"id":"7kAUMTJajo6u"}},{"cell_type":"markdown","source":["**Problem 1: Basic Gradient Descent [30 points]**\n","\n","Now, instead of using the analytic method to find the best parameters for the linear regression problem, you need to implement a gradient descent (GD) approach. Initialize your parameters with all zeros, set the number of iterations to 1000, and the learning rate to 1e-3. Report the MSE score and compare it to the one you found using the analytical approach."],"metadata":{"id":"e1aHm3l_vUU5"}},{"cell_type":"code","source":["import numpy as np"],"metadata":{"id":"GlVN3qJ9D8Dg"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def gd_linear_regression(X, y, num_step, lr):\n","    \"\"\"Use gradient descent to find the optimal parameters\"\"\"\n","    # initialize parameters\n","    parameters = np.zeros((X.shape[1], 1))\n","    #############################################\n","    ## TODO: Use GD to find optimal parameters ##\n","    #############################################\n","    for step in range(num_step):\n","        # Calculate the predictions\n","        y_pred = X.dot(parameters)\n","\n","        # Calculate the gradient of the mean squared error\n","        gradient = -2 * X.T.dot(y - y_pred)\n","\n","        # Update parameters using the gradient and learning rate\n","        parameters -= lr * gradient\n","    #############################################\n","    ############# End of your code ##############\n","    #############################################\n","\n","    return parameters\n","\n","num_step = 1000\n","lr = 1e-3\n","data_train = np.random.rand(100, 2)\n","y_train = np.random.rand(100, 1)\n","parameters_gd = gd_linear_regression(data_train, y_train, num_step, lr)\n","print(parameters_gd)"],"metadata":{"id":"HasYEcAwwZZL","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1697939760261,"user_tz":420,"elapsed":181,"user":{"displayName":"Xianwu Zhao","userId":"12232356097360139039"}},"outputId":"9fa4f9a6-f9aa-4135-b821-98448bdc2979"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[[0.59229775]\n"," [0.34529278]]\n"]}]},{"cell_type":"markdown","source":["Now evaluate the parameters you get by gradient descent on the validation set."],"metadata":{"id":"OQLhTSeEIsJq"}},{"cell_type":"code","source":["y_test_pred = None\n","##################################################\n","## TODO: Make predictions on the validation set ##\n","##################################################\n","data_validation = np.array([[0.59229775, 0.34529278]])\n","y_test_pred = data_validation.dot(parameters_gd)\n","\n","y_test = np.array([[0.59229775], [0.34529278]])\n","##################################################\n","################ End of your code ################\n","##################################################\n","\n","# Calculate MSE error\n","mse = np.mean((y_test - y_test_pred) ** 2)\n","print(f\"MSE on validation set: {mse}\")"],"metadata":{"id":"au2_Q9gUI2r5","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1697940482403,"user_tz":420,"elapsed":159,"user":{"displayName":"Xianwu Zhao","userId":"12232356097360139039"}},"outputId":"beddb34c-772e-4da0-adf6-23b0bf6570a5"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["MSE on validation set: 0.015254422469516641\n"]}]},{"cell_type":"markdown","source":["**Problem 2: Learning Rate in Gradient Descent [20 points]**\n","\n","In this problem, you need to experiment with different learning rates. Please report the MSE score when you set your learning rate as 0.05 and 1e-7 (with the number of gradient descent steps remaining at 1000). Discuss your findings."],"metadata":{"id":"Mx6xeK-h2J_U"}},{"cell_type":"code","source":["data_validation = np.array([[0.59229775, 0.34529278]])\n","y_validation = np.array([[0.59229775], [0.34529278]])\n","# Experiment with a learning rate of 0.05\n","lr = 0.05\n","parameters_gd_lr_0_05 = gd_linear_regression(data_train, y_train, num_step, lr)\n","y_validation_pred_lr_0_05 = data_validation.dot(parameters_gd_lr_0_05)\n","mse_validation_lr_0_05 = np.mean((y_validation - y_validation_pred_lr_0_05) ** 2)\n","print(f\"MSE on validation set (LR=0.05): {mse_validation_lr_0_05}\")\n","\n","# Experiment with a learning rate of 1e-7\n","lr = 1e-7\n","parameters_gd_lr_1e_minus_7 = gd_linear_regression(data_train, y_train, num_step, lr)\n","y_validation_pred_lr_1e_minus_7 = data_validation.dot(parameters_gd_lr_1e_minus_7)\n","mse_validation_lr_1e_minus_7 = np.mean((y_validation - y_validation_pred_lr_1e_minus_7) ** 2)\n","print(f\"MSE on validation set (LR=1e-7): {mse_validation_lr_1e_minus_7}\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"nkCYKG3YAfgy","executionInfo":{"status":"ok","timestamp":1697940632573,"user_tz":420,"elapsed":198,"user":{"displayName":"Xianwu Zhao","userId":"12232356097360139039"}},"outputId":"2c25922a-2d83-4be9-a4f4-692ef201f9ec"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["MSE on validation set (LR=0.05): nan\n","MSE on validation set (LR=1e-7): 0.23058093258595888\n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-21-28a153d77694>:13: RuntimeWarning: overflow encountered in multiply\n","  gradient = -2 * X.T.dot(y - y_pred)\n","<ipython-input-21-28a153d77694>:16: RuntimeWarning: invalid value encountered in subtract\n","  parameters -= lr * gradient\n"]}]},{"cell_type":"markdown","source":["**Problem 3: Linear Regression with L2 Regularization [50 points]**\n","\n"," Recall the objective function for linear regression can be expressed as $E(\\mathbf{w})=\\frac{1}{N}\\|\\mathbf{X}\\mathbf{w}-\\mathbf{y}\\|^2$. Minimizing this function with respect to $\\mathbf{w}$ leads to the optimal $\\mathbf{w}^*$ as $(\\mathbf{X}^T\\mathbf{X})^{-1}\\mathbf{X}^T\\mathbf{y}$.  However, this solution holds only when $\\mathbf{X}^T\\mathbf{X}$ is nonsingular.\n","\n","To overcome this problem, the following objective\n","function is commonly minimized instead:\n","$E_2(\\mathbf{w})=\\|\\mathbf{X}\\mathbf{w}-\\mathbf{y}\\|^2+\\alpha\\|\\mathbf{w}\\|^2,$ where $\\alpha>0$ is a user-specified parameter.  This objective function is often called ridge regression.  \n","\n","Now, you need to repeat what you have done to obtain the optimal parameters of the ridge regression model using **both analytical** and **gradient descent** approaches.\n","\n","Compare the MSE on the validation set for parameters obtained by four method: linear regression with analytical and gradient descent solution, and ridge regression with analytical and gradient descent solution (feel free to explore different values for $\\alpha$).\n","\n","Report your results in the following setting and discuss your findings:\n","\n","*   Generate 1000 random data points with input dimension 100 (not including bias). Fix 100 of them as test points. Among the remaining 900 data points, use different number of data points (25, 50, 75, 100, ..., 300) as training data. Report MSE on the test set and plot the MSE as a function of the number of training data.\n","\n"],"metadata":{"id":"hLSag1cK32Mv"}},{"cell_type":"code","source":["import numpy as np\n","import matplotlib.pyplot as plt"],"metadata":{"id":"cd6JmfDYKdN1"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def ridge_regression_analyt(X, y, alpha):\n","    \"\"\"Train ridge regression analytically.\"\"\"\n","    W_optim = None\n","    ##########################################\n","    ## TODO: Calculate the optimal solution ##\n","    ##########################################\n","    X_transpose = X.T\n","    identity = np.identity(X.shape[1])\n","\n","    # Calculate the optimal weights using the closed-form solution\n","    W_optim = np.linalg.inv(X_transpose.dot(X) + alpha * identity).dot(X_transpose).dot(y)\n","    ##########################################\n","    ############ End of your code ############\n","    ##########################################\n","    return W_optim"],"metadata":{"id":"QoULzFNb6feW","executionInfo":{"status":"ok","timestamp":1697942976528,"user_tz":420,"elapsed":157,"user":{"displayName":"Xianwu Zhao","userId":"12232356097360139039"}}},"execution_count":55,"outputs":[]},{"cell_type":"code","source":["def gd_ridge_regression(X, y, alpha, num_step, lr):\n","    \"\"\"Use gradient descent to find the optimal parameters\"\"\"\n","    # initialize parameters\n","    parameters = np.zeros((X.shape[1], 1))\n","    #############################################\n","    ## TODO: Use GD to find optimal parameters ##\n","    #############################################\n","    y = y.reshape(-1, 1)\n","    for step in range(num_step):\n","        y_pred = X.dot(parameters)\n","        gradient = -2 * X.T.dot(y - y_pred) + 2 * alpha * parameters\n","        parameters -= lr * gradient\n","    #############################################\n","    ########### End of your code ################\n","    #############################################\n","\n","    return parameters"],"metadata":{"id":"6V3Cgtl8K4XY","executionInfo":{"status":"ok","timestamp":1697942978072,"user_tz":420,"elapsed":162,"user":{"displayName":"Xianwu Zhao","userId":"12232356097360139039"}}},"execution_count":56,"outputs":[]},{"cell_type":"code","source":["# Generate random data\n","np.random.seed(0)\n","num_samples = 1000\n","input_dim = 100\n","num_test_points = 100\n","X = np.random.rand(num_samples, input_dim)\n","y = 4 + 3 * X[:, 0] + np.random.rand(num_samples)\n","\n","# Split data into test and training sets\n","X_test = X[:num_test_points]\n","y_test = y[:num_test_points]\n","X_train = X[num_test_points:]\n","y_train = y[num_test_points:]\n","\n","# Ridge regression with analytical solution\n","alphas = [0.01, 0.1, 1.0, 10.0]\n","mse_ridge_analytical = []\n","\n","for alpha in alphas:\n","    X_train_with_bias = np.c_[np.ones((X_train.shape[0], 1)), X_train]\n","    X_test_with_bias = np.c_[np.ones((X_test.shape[0], 1)), X_test[:, :X_train.shape[1]]]\n","    w_ridge_analytical = ridge_regression_analyt(X_train_with_bias, y_train, alpha)\n","    y_test_pred_ridge_analytical = X_test_with_bias.dot(w_ridge_analytical)\n","    mse_ridge_analytical.append(np.mean((y_test - y_test_pred_ridge_analytical) ** 2))\n","\n","# Ridge regression with gradient descent\n","alpha = 0.1\n","training_sizes = list(range(25, 301, 25))\n","mse_ridge_gd = []\n","\n","for size in training_sizes:\n","    X_train_subset = X_train[:size]\n","    y_train_subset = y_train[:size]\n","    X_train_with_bias = np.c_[np.ones((X_train_subset.shape[0], 1)), X_train_subset]\n","\n","    # Ensure that the dimensions of X_test_with_bias match those of X_train_with_bias\n","    X_test_subset = X_test[:, :X_train_subset.shape[1]]\n","    X_test_with_bias = np.c_[np.ones((X_test_subset.shape[0], 1)), X_test_subset]\n","\n","    parameters_ridge_gd = gd_ridge_regression(X_train_with_bias, y_train_subset, alpha, num_step=1000, lr=1e-3)\n","    y_test_pred_ridge_gd = X_test_with_bias.dot(parameters_ridge_gd)\n","    mse_ridge_gd.append(np.mean((y_test - y_test_pred_ridge_gd) ** 2))\n","\n","\n","# Plot the MSE as a function of the number of training data points\n","plt.figure(figsize=(10, 6))\n","plt.plot(training_sizes, mse_ridge_gd, label='Ridge Regression (GD)')\n","for i, alpha in enumerate(alphas):\n","    plt.axhline(y=mse_ridge_analytical[i], label=f'Ridge Regression (Analytical, alpha={alpha})', linestyle='--')\n","plt.xlabel('Number of Training Data Points')\n","plt.ylabel('MSE')\n","plt.legend()\n","plt.title('MSE vs. Number of Training Data Points (Ridge Regression)')\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":668},"id":"Yzomag7wLHwE","executionInfo":{"status":"ok","timestamp":1697942981413,"user_tz":420,"elapsed":1082,"user":{"displayName":"Xianwu Zhao","userId":"12232356097360139039"}},"outputId":"c944f3d5-7ffb-40a3-e21f-8b04df65859c"},"execution_count":57,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-57-eaa4f6bc71c8>:42: RuntimeWarning: overflow encountered in square\n","  mse_ridge_gd.append(np.mean((y_test - y_test_pred_ridge_gd) ** 2))\n","<ipython-input-56-b4b2b6f4f96c>:11: RuntimeWarning: overflow encountered in multiply\n","  gradient = -2 * X.T.dot(y - y_pred) + 2 * alpha * parameters\n","<ipython-input-56-b4b2b6f4f96c>:12: RuntimeWarning: invalid value encountered in subtract\n","  parameters -= lr * gradient\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]}]}