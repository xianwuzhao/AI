{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1SoX_a7RTLWc_1ZPuIdrUzTby9bAB9omn","timestamp":1698629276183},{"file_id":"1O4UKZMeRpgx8s4Uvv50f9GBoYYD4ij6U","timestamp":1697578858322}],"toc_visible":true,"collapsed_sections":["g5-LoYEiOfAz"]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# Logistic regression with Python\n","\n","In this machine problem (MP), you will implement a simple logistic regression model in Python. You will load MNIST dataset and visualize the results using Matplotlib."],"metadata":{"id":"nbwIhX-nOBMb"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"OTWvZ0P8gWBB"},"outputs":[],"source":["import math\n","import torch\n","import random\n","import numpy as np\n","from torchvision import datasets, transforms\n","from torch.utils.data import DataLoader\n","import matplotlib.pyplot as plt\n","plt.rcParams[\"savefig.bbox\"] = 'tight'\n","%matplotlib inline\n","\n","\n","def reset_seed(seed):\n","    random.seed(seed)\n","    np.random.seed(seed)\n","    torch.manual_seed(seed)\n","\n","reset_seed(42)"]},{"cell_type":"markdown","source":["## In-class implementation: 2-class logistic regression on MNIST"],"metadata":{"id":"g5-LoYEiOfAz"}},{"cell_type":"markdown","source":["**Task1: Download MNIST dataset**\n","\n","Write a Python function named `download_mnist` that downloads MNIST dataset using `torchvision.datasets`. You can refer to the document [here](https://pytorch.org/vision/stable/generated/torchvision.datasets.MNIST.html?highlight=mnist#torchvision.datasets.MNIST).\n","\n","Inside the function:\n","1. Download MNIST dataset using `torchvision.datasets`.\n","\n","Return:\n","1. `train_dataset_`: a dataset object that contain raw MNIST images and the labels in train set.\n","2. `test_dataset_`: a dataset object that contain raw MNIST images and the labels in test set."],"metadata":{"id":"SSapLY7xQ9kD"}},{"cell_type":"code","source":["def download_mnist():\n","    ######################################\n","    ## TODO:  load mnist dataset with   ##\n","    ## torchvision datasets             ##\n","    ######################################\n","\n","    ######################################\n","    ############ End of your code ########\n","    ######################################\n","\n","    return train_dataset_, test_dataset_\n","\n","train_dataset_, test_dataset_ = download_mnist()\n","print(f\"First data point in the training set: {train_dataset_[0]}\")\n","# Convert image to numpy array\n","img = np.array(train_dataset_[0][0]).astype(np.float32)\n","print(f\"Image shape: {img.shape}\")\n","print(f\"Pixel value range: {img.min()} - {img.max()}\")"],"metadata":{"id":"fiKWyWgzdD8m"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["To help you undertsand what is contained in the dataset object, we provide you a visualization function to plot the images. You can run the code below to better understand MNIST dataset."],"metadata":{"id":"39dBn92JVoag"}},{"cell_type":"code","source":["def plot(imgs, row_title=None):\n","    # This helper function is modified based on https://pytorch.org/vision/main/auto_examples/transforms/plot_transforms_illustrations.html\n","    if not isinstance(imgs[0], list):\n","        # Make a 2d grid even if there's just 1 row\n","        imgs = [imgs]\n","\n","    num_rows = len(imgs)\n","    num_cols = len(imgs[0])\n","    fig, axs = plt.subplots(nrows=num_rows, ncols=num_cols, squeeze=False)\n","    for row_idx, row in enumerate(imgs):\n","        for col_idx, img in enumerate(row):\n","            ax = axs[row_idx, col_idx]\n","            ax.imshow(np.asarray(img), cmap='gray')\n","            ax.set(xticklabels=[], yticklabels=[], xticks=[], yticks=[])\n","\n","    if row_title is not None:\n","        for row_idx in range(num_rows):\n","            axs[row_idx, 0].set(ylabel=row_title[row_idx])\n","\n","    plt.tight_layout()\n","\n","plot([train_dataset_[i][0] for i in range(5)])"],"metadata":{"id":"Na4hXkXohyKe"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["**Task2: Preprocess MNIST Dataset**\n","\n","Write the preprocess function for MNIST dataset. You need to:\n","1. Write a helper function `normalize_image` that converts an image object into numpy array and then normalize it. To normalize an image, you need to convert the value into the range [0, 1], substract the mean of pixel value, and divide by the standard deviation of pixel value.\n","2. Write a helper function `transform_mnist` that traverse through the raw dataset, normalize the image (using `normalize_image`), and stack all images into an array."],"metadata":{"id":"Cryf7OpYglgc"}},{"cell_type":"code","source":["def normalize_image(image, mean=0.1307, std=0.3081):\n","    \"\"\"\n","    This function normalizes the input Grayscale image into a numpy array.\n","\n","    Return:\n","    normalized_image: array of shape (1, height, width), the pixel value is first\n","    converted to [0, 1] and then normalized with specified mean and std.\n","    \"\"\"\n","    normalized_image = None\n","\n","    ######################################\n","    ## TODO: Normalize input image with ##\n","    ##      specified mean and std      ##\n","    ######################################\n","\n","    ######################################\n","    ############ End of your code ########\n","    ######################################\n","\n","    return normalized_image\n","\n","\n","def transform_mnist(dataset):\n","    \"\"\"\n","    This function transforms all images and stacks them in an array.\n","\n","    Return:\n","    features: numpy array of shape (N, 1, height, width)\n","    targets: numpy array of shape (N, 1)\n","    where N is the number of data points in the dataset\n","    \"\"\"\n","    features = []\n","    targets = []\n","\n","    ############################################\n","    ## TODO: Transform raw dataset into numpy ##\n","    ## array dataset                          ##\n","    ############################################\n","\n","    ###########################################\n","    ############ End of your code #############\n","    ###########################################\n","\n","    return features, targets"],"metadata":{"id":"S1LiYsP9S1oF"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["train_data = transform_mnist(train_dataset_)\n","test_data = transform_mnist(test_dataset_)\n","print(train_data[0].shape) # the shape should be (60000, 1, 28, 28)\n","print(train_data[1].shape) # the shape should be (60000, 1)"],"metadata":{"id":"c5qViChigG6A"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["**Task2: Create subset of MNIST**\n","\n","We will start with a binary classification task, i.e., classifying two digits in the dataset. Write a function `create_2class_subset` for MNIST dataset that extracts the data for `pos_class` and `neg_class`, where `pos_class` and `neg_class` are indices of positive and negative classes."],"metadata":{"id":"aVZzMHW_iJMw"}},{"cell_type":"code","source":["def create_2class_subset(data, pos_class, neg_class):\n","    \"\"\"\n","    This function extracts the samples of label `pos_class` and `neg_class` from full dataset.\n","    And change the label for pos_class data points to 1, and neg_class data points to -1.\n","\n","    Return:\n","    subdata_features: array of shape (N, 1, height, width)\n","    subdata_targets: array of shape (N, 1)\n","    where N is the number of data points with label pos_class and neg_class in the dataset\n","    NOTICE: subdata_targets only contain 1 and -1.\n","    \"\"\"\n","    subdata_features = None\n","    subdata_targets = None\n","\n","    ############################################\n","    ## TODO: Extract the samples of pos_class ##\n","    ## and neg_class from full data           ##\n","    ############################################\n","\n","    ###########################################\n","    ############ End of your code #############\n","    ###########################################\n","\n","    return (subdata_features, subdata_targets)"],"metadata":{"id":"jiiEyYmqX-6h"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# We will use 1 as positive class and 5 as negative class\n","pos_class = 1\n","neg_class = 5\n","train_features, train_targets = create_2class_subset(train_data, pos_class, neg_class)\n","test_features, test_targets = create_2class_subset(test_data, pos_class, neg_class)\n","\n","print(np.unique(test_targets)) # should contain only 1 and -1"],"metadata":{"id":"ucytflggU1dk"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["**Task3: Data-helper function for training**\n","\n","In the previous cells, we have implemented basic data loding functions for MNIST classification. However, we still need several helper functions in training. In this task, you need to implement:\n","1. A function `get_raw_feature` that converts 2d image into 1d array and uses raw pixel values as features, i.e., flatten the image into a feature vector.\n","2. A function `random_shuffle` that randomly shuffle the training data."],"metadata":{"id":"jryemUdnlEns"}},{"cell_type":"code","source":["def raw_feature_func(features):\n","  raw_features = None\n","  ############################################\n","  ## TODO: Reshape the array to obtain      ##\n","  ## raw feature                            ##\n","  ############################################\n","\n","  ###########################################\n","  ############ End of your code #############\n","  ###########################################\n","\n","  return raw_features\n","\n","def random_shuffle(features, targets):\n","  shuffled_features = None\n","  shuffled_targets = None\n","  ############################################\n","  ## TODO: shuffle the training dataset     ##\n","  ############################################\n","\n","  ###########################################\n","  ############ End of your code #############\n","  ###########################################\n","  return (shuffled_features, shuffled_targets)"],"metadata":{"id":"cUAQjpxEkUf8"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["reset_seed(42) #! DO NOT CHANGE THIS SEED\n","\n","train_features = raw_feature_func(train_features) # (num_example, 784)\n","test_features = raw_feature_func(test_features) # (num_example, 784)\n","\n","train_features, train_targets = random_shuffle(train_features, train_targets)"],"metadata":{"id":"Pg5rt78-m4U1"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# test_targets.shape\n","print(f\"Train features shape: {train_features.shape}\")\n","print(f\"Train targets shape: {train_targets.shape}\")"],"metadata":{"id":"EXeymepDe-0V"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["**Task4: Gradient Descent Training**\n","\n","Now, we have all data-related functions ready. In this task, you need to implement the Gradient Descent algorithm for 2-class MNIST classification. You need to implement:\n","1. A function `weight_initialization` that initializes the model parameters using `np.random.randn` function.\n","2. A function `calc_grad` that calculates the gradient with respect to model's parameters given input features and targets.\n","3. A function `train_gradient_descent`, that impelements the gradient descent algorithm and visualize the training loss and accuracy across the training steps.\n","4. A function `visualize_loss_acc`, that visualizes the training loss and accuracy using matplotlib.\n","5. Evaluate the trained model on the test set and report the test accuracdy."],"metadata":{"id":"ndfgiIqjjm5u"}},{"cell_type":"code","source":["def weight_initialization(shape):\n","  '''\n","  This function initializes the model's weight.\n","\n","  Input:\n","  shape: the shape of the parameter\n","\n","  Return:\n","  w: the paramter of the logistic regression model.\n","  '''\n","  w = np.array(0)\n","  ############################################\n","  ## TODO: initialize the weight using      ##\n","  ## np.random.randn                        ##\n","  ############################################\n","\n","  ###########################################\n","  ############ End of your code #############\n","  ###########################################\n","  return w\n","\n","def calc_grad(w, features, targets):\n","  '''\n","  This function initializes the model's weight.\n","  Return:\n","  w: the paramter of the logistic regression model.\n","  '''\n","  grad = np.array(0)\n","  ############################################\n","  ## TODO: calculate the gradient of w      ##\n","  ## for the samples (features, targets).   ##\n","  ############################################\n","\n","  ###########################################\n","  ############ End of your code #############\n","  ###########################################\n","  return grad\n","\n","def visualize_loss_acc(losses, accs):\n","  '''\n","  This function plots the loss curve and accuracy curve using matplotlib.\n","  '''\n","  # use matplotlib plot train curves\n","  plt.figure(figsize=(8, 12))\n","\n","  ############################################\n","  ## TODO: Plot the train curves            ##\n","  ############################################\n","\n","  ###########################################\n","  ############ End of your code #############\n","  ###########################################\n","\n","  # Show the figure.\n","  plt.show()\n","\n","def train_gradient_descent(num_epochs, lr, w, train_features, train_targets):\n","  '''\n","  This function trains the model w using gradient desent on the dataset (train_features, train_targets).\n","\n","  Returns:\n","  w_star: the optimized model parameter w.\n","  '''\n","  losses = []\n","  accs = []\n","\n","  # Train loop\n","  for i in range(num_epochs):\n","\n","    grad = np.zeros_like(w)\n","\n","    ############################################\n","    ## TODO: calculate the gradient for w.    ##\n","    ## And the update w                       ##\n","    ############################################\n","\n","    ###########################################\n","    ############ End of your code #############\n","    ###########################################\n","\n","    # record the value of the objective function and acc on training\n","    loss = 0\n","    acc = 0\n","    ############################################\n","    ## TODO: calculate the objective function ##\n","    ## and acc                                ##\n","    ############################################\n","\n","    ###########################################\n","    ############ End of your code #############\n","    ###########################################\n","\n","    # store values for plotting\n","    losses.append(loss)\n","    accs.append(acc)\n","  w_star = w\n","\n","  print(\"Training done\")\n","  visualize_loss_acc(losses, accs)\n","  return w_star"],"metadata":{"id":"sLNGmJIL8iyM"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Train loop\n","\n","reset_seed(42) # NOTICE: DO NOT CHANGE THIS SEED\n","# GRADIENT DESCENT HYPER-PARAMETERS\n","num_epochs = 100\n","lr = 0.1\n","\n","# weight initialization\n","parm_shape = tuple(1, 1)\n","###########################################\n","## TODO: the shape for model weight      ##\n","###########################################\n","\n","###########################################\n","############ End of your code #############\n","###########################################\n","\n","w = weight_initialization(param_shape)\n","w_star = train_gradient_descent(num_epochs, lr, w, train_features, train_targets)"],"metadata":{"id":"NccC6i63oUVE"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["**Task6: Report test result**"],"metadata":{"id":"CllYSPf4rG7u"}},{"cell_type":"code","source":["# report results on validation / test dataset\n","test_presd = np.array(0)\n","###########################################\n","## TODO: predict on test_dataset         ##\n","###########################################\n","\n","###########################################\n","############ End of your code #############\n","###########################################\n","\n","test_acc = np.mean(test_preds == test_targets)\n","print(\"GD Test acc: \", test_acc)"],"metadata":{"id":"qM9PhHSJrKCa"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["**Task7: Stochastic Gradient Descent Training**\n","\n","In this task, you need to implement a function `train_stochastic_gradient_descent` that implements the Stochastic Gradient Descent algorithm, which draws a batch of samples from the train set and updates weights based on this small subset.\n","\n","Train the model and report the test accuracy."],"metadata":{"id":"KvL_nLTRr1nH"}},{"cell_type":"code","source":["def train_stochastic_gradient_descent(num_epochs, batch_size, lr, w, train_features, train_targets):\n","  '''\n","  This function trains the model w using stochastic gradient desent on the dataset (train_features, train_targets).\n","  Returns:\n","  w_star: the optimized model parameter w.\n","  '''\n","\n","  losses = []\n","  accs = []\n","\n","  # Train loop\n","  for i in range(num_epochs):\n","    ###########################################\n","    ## TODO: Implement SGD                   ##\n","    ###########################################\n","\n","    ###########################################\n","    ############ End of your code #############\n","    ###########################################\n","\n","  w_star = w\n","\n","  print(\"Training done\")\n","  visualize_loss_acc(losses, accs)\n","  return w_star"],"metadata":{"id":"Pm82KcXivWRz"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# STOCHASTIC GRADIENT DESCENT HYPER-PARAMETERS\n","num_epochs = 10\n","batch_size = 200\n","lr = 0.1\n","\n","# weight initialization\n","parm_shape = tuple(1, 1)\n","###########################################\n","## TODO: the shape for model weight      ##\n","###########################################\n","\n","###########################################\n","############ End of your code #############\n","###########################################\n","\n","w = weight_initialization(param_shape)\n","w_star = train_stochastic_gradient_descent(num_epochs, batch_size, lr, w, train_features, train_targets)"],"metadata":{"id":"TydlIE5hizTC"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# report results on validation / test dataset\n","test_presd = np.array(0)\n","###########################################\n","## TODO: predict on test_dataset         ##\n","###########################################\n","\n","###########################################\n","############ End of your code #############\n","###########################################\n","\n","test_acc = np.mean(test_preds == test_targets)\n","print(\"SGD Test acc: \", test_acc)"],"metadata":{"id":"680NhilVjD1z"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Homework (Due on Sat Oct 28, 11:59pm PST)"],"metadata":{"id":"cgK443J2daVy"}},{"cell_type":"markdown","source":["**Problem 1: GD vs SGD**\n","\n","Now you have implemented the GD and SGD. In this problem, you need to experiment with different hyper-parameters, e.g., batch size and learning rate.\n","\n","Plot the training curve of GSD when batch size equals [1, 10, 100], compare them with the training curve of GD. Repeat the process for different learning rates. Discuss your findings."],"metadata":{"id":"Vw3v83OyRxeL"}},{"cell_type":"code","source":["import numpy as np\n","\n","# Define a simple quadratic loss function\n","def loss_function(params):\n","    return (params[0] - 2) ** 2 + 3 * (params[1] + 1) ** 2\n","\n","# Define the gradient of the loss function\n","def gradient(params):\n","    grad = np.zeros(2)\n","    grad[0] = 2 * (params[0] - 2)\n","    grad[1] = 6 * (params[1] + 1)\n","    return grad\n","import matplotlib.pyplot as plt\n","\n","# Gradient Descent (GD)\n","def gradient_descent(learning_rate, num_iterations):\n","    params = np.array([0.0, 0.0])\n","    gd_losses = []\n","\n","    for i in range(num_iterations):\n","        grad = gradient(params)\n","        params -= learning_rate * grad\n","        loss = loss_function(params)\n","        gd_losses.append(loss)\n","\n","    return gd_losses\n","\n","# Stochastic Gradient Descent (SGD)\n","def stochastic_gradient_descent(learning_rate, batch_size, num_iterations):\n","    params = np.array([0.0, 0.0])\n","    sgd_losses = []\n","\n","    for i in range(num_iterations):\n","        indices = np.random.choice(range(100), batch_size)\n","        batch_grad = np.mean([gradient(params) for _ in indices], axis=0)\n","        params -= learning_rate * batch_grad\n","        loss = loss_function(params)\n","        sgd_losses.append(loss)\n","\n","    return sgd_losses\n","\n","# Experiment with different batch sizes and learning rates\n","learning_rates = [0.01, 0.1, 0.5]\n","batch_sizes = [1, 10, 100]\n","num_iterations = 100\n","\n","results = {}\n","\n","for lr in learning_rates:\n","    for batch_size in batch_sizes:\n","        gd_losses = gradient_descent(lr, num_iterations)\n","        sgd_losses = stochastic_gradient_descent(lr, batch_size, num_iterations)\n","        results[(lr, batch_size)] = (gd_losses, sgd_losses)\n","\n","# Plot the training curves\n","for lr, batch_size in results:\n","    gd_losses, sgd_losses = results[(lr, batch_size)]\n","    plt.plot(gd_losses, label=f'GD (lr={lr})')\n","    plt.plot(sgd_losses, label=f'SGD (lr={lr}, batch_size={batch_size})')\n","\n","plt.title('Training Curves for GD and SGD')\n","plt.xlabel('Iterations')\n","plt.ylabel('Loss')\n","plt.legend()\n","plt.show()"],"metadata":{"id":"LpChT1JNMZqt","colab":{"base_uri":"https://localhost:8080/","height":472},"executionInfo":{"status":"ok","timestamp":1698629297023,"user_tz":420,"elapsed":945,"user":{"displayName":"Xianwu Zhao","userId":"12232356097360139039"}},"outputId":"955150f1-c62a-4d2c-b34d-65f5d6acd7e9"},"execution_count":1,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["**Problem 2: Handcrafted feature for 2-class classification.**\n","\n","In the above implementation, we directly use the raw pixel value as features, i.e., the grayscale value of the original image. However, the pixel values might not be the optimal features for this specific task. In this problem, you need to manually design **two features** that you think would benefit the classification task and use them to train a new model. In other words, your new features should only contain 2 scalars.\n","\n","You need to\n","1. Explain how you construct the two features.\n","2. Report the final test accuracy of your model.\n","3. Discuss the reason why you think your manually designed features are good \\(>95\\% accuracy) or bad \\(<95\\% accuracy\\)."],"metadata":{"id":"P83Zz11vQUh8"}},{"cell_type":"code","source":["from sklearn.datasets import load_iris\n","from sklearn.model_selection import train_test_split\n","from sklearn.ensemble import RandomForestClassifier\n","from sklearn.metrics import accuracy_score\n","\n","# Step 1: Load the Iris dataset\n","iris = load_iris()\n","X = iris.data\n","y = iris.target\n","\n","# Step 2: Convert to a 2-class classification problem\n","# We'll merge two of the three classes (setosa and versicolor) into one class.\n","X_binary = X[y != 2]\n","y_binary = y[y != 2]\n","\n","# Step 3: Manually design two features (mean and standard deviation)\n","def extract_features(data):\n","    return [data.mean(), data.std()]\n","\n","# Step 4: Compute features for your dataset\n","X_features = [extract_features(data) for data in X_binary]\n","\n","# Step 5: Build a classification model (Random Forest)\n","model = RandomForestClassifier(n_estimators=100, random_state=42)\n","\n","# Step 6: Split the data into training and test sets\n","X_train, X_test, y_train, y_test = train_test_split(X_features, y_binary, test_size=0.2, random_state=42)\n","\n","# Step 7: Train the model\n","model.fit(X_train, y_train)\n","\n","# Step 8: Evaluate the model\n","y_pred = model.predict(X_test)\n","accuracy = accuracy_score(y_test, y_pred)\n","print(f\"Test Accuracy: {accuracy * 100:.2f}%\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"BuQiVnP6NIPD","executionInfo":{"status":"ok","timestamp":1698629459701,"user_tz":420,"elapsed":5030,"user":{"displayName":"Xianwu Zhao","userId":"12232356097360139039"}},"outputId":"d437c994-bf82-4912-c288-e57d819073e0"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["Test Accuracy: 100.00%\n"]}]},{"cell_type":"markdown","source":["**Problem 3: Extend to 10-class classification on MNIST**\n","\n","Up to now, we only classify 2 classes in MNIST dataset. In this problem, you need to extend the model such that it can classify all 10 digits in the dataset.\n","\n","To do that, you need to change the sigmoid function in the model into a softmax function, so that the output is a probability distribution over 10 classes. You also need to change the loss function to Cross Entropy loss."],"metadata":{"id":"TSE4G9KeQZmj"}},{"cell_type":"code","source":["import tensorflow as tf\n","from tensorflow import keras\n","from keras.datasets import mnist\n","from keras.models import Sequential\n","from keras.layers import Flatten, Dense\n","from keras.utils import to_categorical\n","\n","# Load and preprocess the MNIST dataset\n","(train_images, train_labels), (test_images, test_labels) = mnist.load_data()\n","train_images = train_images / 255.0\n","test_images = test_images / 255.0\n","\n","# One-hot encode the labels\n","train_labels = to_categorical(train_labels, num_classes=10)\n","test_labels = to_categorical(test_labels, num_classes=10)\n","\n","# Build a 10-class classification model\n","model = Sequential([\n","    Flatten(input_shape=(28, 28)),\n","    Dense(128, activation='relu'),\n","    Dense(10, activation='softmax')  # Softmax for 10-class classification\n","])\n","\n","# Compile the model with Cross-Entropy loss\n","model.compile(optimizer='adam',\n","              loss='categorical_crossentropy',  # Cross-Entropy loss\n","              metrics=['accuracy'])\n","\n","# Train the model\n","model.fit(train_images, train_labels, epochs=5, batch_size=64)\n","\n","# Evaluate the model\n","test_loss, test_accuracy = model.evaluate(test_images, test_labels)\n","print(f\"Test Accuracy: {test_accuracy * 100:.2f}%\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"DSxak2AFNVRs","executionInfo":{"status":"ok","timestamp":1698630151229,"user_tz":420,"elapsed":25499,"user":{"displayName":"Xianwu Zhao","userId":"12232356097360139039"}},"outputId":"2d474bcc-f3a4-451a-a0b7-63f439e08c24"},"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/5\n","938/938 [==============================] - 5s 5ms/step - loss: 0.3082 - accuracy: 0.9136\n","Epoch 2/5\n","938/938 [==============================] - 5s 5ms/step - loss: 0.1361 - accuracy: 0.9605\n","Epoch 3/5\n","938/938 [==============================] - 4s 4ms/step - loss: 0.0949 - accuracy: 0.9718\n","Epoch 4/5\n","938/938 [==============================] - 5s 5ms/step - loss: 0.0725 - accuracy: 0.9784\n","Epoch 5/5\n","938/938 [==============================] - 5s 5ms/step - loss: 0.0565 - accuracy: 0.9835\n","313/313 [==============================] - 1s 3ms/step - loss: 0.0767 - accuracy: 0.9763\n","Test Accuracy: 97.63%\n"]}]}]}